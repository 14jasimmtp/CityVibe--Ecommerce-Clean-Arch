// Code generated by MockGen. DO NOT EDIT.
// Source: /home/jasim/CityVibe-Ecommerce-CleanCode-Project/pkg/usecase/interface/user.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	domain "github.com/14jasimmtp/CityVibe-Project-Clean-Architecture/pkg/domain"
	models "github.com/14jasimmtp/CityVibe-Project-Clean-Architecture/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUserUseCase is a mock of UserUseCase interface.
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase.
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance.
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// AddAddress mocks base method.
func (m *MockUserUseCase) AddAddress(Address models.Address, Token string) (models.AddressRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddress", Address, Token)
	ret0, _ := ret[0].(models.AddressRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAddress indicates an expected call of AddAddress.
func (mr *MockUserUseCaseMockRecorder) AddAddress(Address, Token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockUserUseCase)(nil).AddAddress), Address, Token)
}

// DeleteAddress mocks base method.
func (m *MockUserUseCase) DeleteAddress(Token, aid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAddress", Token, aid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAddress indicates an expected call of DeleteAddress.
func (mr *MockUserUseCaseMockRecorder) DeleteAddress(Token, aid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAddress", reflect.TypeOf((*MockUserUseCase)(nil).DeleteAddress), Token, aid)
}

// FindUserByPhone mocks base method.
func (m *MockUserUseCase) FindUserByPhone(phone string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByPhone", phone)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByPhone indicates an expected call of FindUserByPhone.
func (mr *MockUserUseCaseMockRecorder) FindUserByPhone(phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByPhone", reflect.TypeOf((*MockUserUseCase)(nil).FindUserByPhone), phone)
}

// ForgotPassword mocks base method.
func (m *MockUserUseCase) ForgotPassword(phone string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForgotPassword", phone)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForgotPassword indicates an expected call of ForgotPassword.
func (mr *MockUserUseCaseMockRecorder) ForgotPassword(phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgotPassword", reflect.TypeOf((*MockUserUseCase)(nil).ForgotPassword), phone)
}

// ResetForgottenPassword mocks base method.
func (m *MockUserUseCase) ResetForgottenPassword(Newpassword models.ForgotPassword) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetForgottenPassword", Newpassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetForgottenPassword indicates an expected call of ResetForgottenPassword.
func (mr *MockUserUseCaseMockRecorder) ResetForgottenPassword(Newpassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetForgottenPassword", reflect.TypeOf((*MockUserUseCase)(nil).ResetForgottenPassword), Newpassword)
}

// SignUp mocks base method.
func (m *MockUserUseCase) SignUp(User models.UserSignUpDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", User)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockUserUseCaseMockRecorder) SignUp(User interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUserUseCase)(nil).SignUp), User)
}

// UpdateAddress mocks base method.
func (m *MockUserUseCase) UpdateAddress(Token, aid string, NewAddress models.Address) (models.AddressRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddress", Token, aid, NewAddress)
	ret0, _ := ret[0].(models.AddressRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAddress indicates an expected call of UpdateAddress.
func (mr *MockUserUseCaseMockRecorder) UpdateAddress(Token, aid, NewAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddress", reflect.TypeOf((*MockUserUseCase)(nil).UpdateAddress), Token, aid, NewAddress)
}

// UpdateUserProfile mocks base method.
func (m *MockUserUseCase) UpdateUserProfile(Token string, User models.UserProfile) (models.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProfile", Token, User)
	ret0, _ := ret[0].(models.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserProfile indicates an expected call of UpdateUserProfile.
func (mr *MockUserUseCaseMockRecorder) UpdateUserProfile(Token, User interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfile", reflect.TypeOf((*MockUserUseCase)(nil).UpdateUserProfile), Token, User)
}

// UserLogin mocks base method.
func (m *MockUserUseCase) UserLogin(user models.UserLoginDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLogin", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockUserUseCaseMockRecorder) UserLogin(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockUserUseCase)(nil).UserLogin), user)
}

// UserProfile mocks base method.
func (m *MockUserUseCase) UserProfile(Token string) (models.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserProfile", Token)
	ret0, _ := ret[0].(models.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserProfile indicates an expected call of UserProfile.
func (mr *MockUserUseCaseMockRecorder) UserProfile(Token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserProfile", reflect.TypeOf((*MockUserUseCase)(nil).UserProfile), Token)
}

// ViewUserAddress mocks base method.
func (m *MockUserUseCase) ViewUserAddress(Token string) ([]models.AddressRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewUserAddress", Token)
	ret0, _ := ret[0].([]models.AddressRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewUserAddress indicates an expected call of ViewUserAddress.
func (mr *MockUserUseCaseMockRecorder) ViewUserAddress(Token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewUserAddress", reflect.TypeOf((*MockUserUseCase)(nil).ViewUserAddress), Token)
}
