// Code generated by MockGen. DO NOT EDIT.
// Source: /home/jasim/CityVibe-Ecommerce-CleanCode-Project/pkg/repository/interface/user.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	domain "github.com/14jasimmtp/CityVibe-Project-Clean-Architecture/pkg/domain"
	models "github.com/14jasimmtp/CityVibe-Project-Clean-Architecture/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// AddAddress mocks base method.
func (m *MockUserRepo) AddAddress(Address models.Address, UserId uint) (models.AddressRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddress", Address, UserId)
	ret0, _ := ret[0].(models.AddressRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAddress indicates an expected call of AddAddress.
func (mr *MockUserRepoMockRecorder) AddAddress(Address, UserId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockUserRepo)(nil).AddAddress), Address, UserId)
}

// ChangePassword mocks base method.
func (m *MockUserRepo) ChangePassword(ResetUser models.ForgotPassword) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", ResetUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockUserRepoMockRecorder) ChangePassword(ResetUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockUserRepo)(nil).ChangePassword), ResetUser)
}

// CheckAddressExist mocks base method.
func (m *MockUserRepo) CheckAddressExist(userid, address uint) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAddressExist", userid, address)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckAddressExist indicates an expected call of CheckAddressExist.
func (mr *MockUserRepoMockRecorder) CheckAddressExist(userid, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAddressExist", reflect.TypeOf((*MockUserRepo)(nil).CheckAddressExist), userid, address)
}

// CheckUserExistsByPhone mocks base method.
func (m *MockUserRepo) CheckUserExistsByPhone(phone string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserExistsByPhone", phone)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserExistsByPhone indicates an expected call of CheckUserExistsByPhone.
func (mr *MockUserRepoMockRecorder) CheckUserExistsByPhone(phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserExistsByPhone", reflect.TypeOf((*MockUserRepo)(nil).CheckUserExistsByPhone), phone)
}

// CheckUserExistsEmail mocks base method.
func (m *MockUserRepo) CheckUserExistsEmail(email string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserExistsEmail", email)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserExistsEmail indicates an expected call of CheckUserExistsEmail.
func (mr *MockUserRepoMockRecorder) CheckUserExistsEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserExistsEmail", reflect.TypeOf((*MockUserRepo)(nil).CheckUserExistsEmail), email)
}

// FindUserByPhone mocks base method.
func (m *MockUserRepo) FindUserByPhone(phone string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByPhone", phone)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByPhone indicates an expected call of FindUserByPhone.
func (mr *MockUserRepoMockRecorder) FindUserByPhone(phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByPhone", reflect.TypeOf((*MockUserRepo)(nil).FindUserByPhone), phone)
}

// GetUserById mocks base method.
func (m *MockUserRepo) GetUserById(id int) (models.UserDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", id)
	ret0, _ := ret[0].(models.UserDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserRepoMockRecorder) GetUserById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserRepo)(nil).GetUserById), id)
}

// RemoveAddress mocks base method.
func (m *MockUserRepo) RemoveAddress(Userid uint, aid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAddress", Userid, aid)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAddress indicates an expected call of RemoveAddress.
func (mr *MockUserRepoMockRecorder) RemoveAddress(Userid, aid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAddress", reflect.TypeOf((*MockUserRepo)(nil).RemoveAddress), Userid, aid)
}

// SignUpUser mocks base method.
func (m *MockUserRepo) SignUpUser(user models.UserSignUpDetails) (*models.UserDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUpUser", user)
	ret0, _ := ret[0].(*models.UserDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUpUser indicates an expected call of SignUpUser.
func (mr *MockUserRepoMockRecorder) SignUpUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpUser", reflect.TypeOf((*MockUserRepo)(nil).SignUpUser), user)
}

// UpdateAddress mocks base method.
func (m *MockUserRepo) UpdateAddress(userid uint, aid string, Address models.Address) (models.AddressRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddress", userid, aid, Address)
	ret0, _ := ret[0].(models.AddressRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAddress indicates an expected call of UpdateAddress.
func (mr *MockUserRepoMockRecorder) UpdateAddress(userid, aid, Address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddress", reflect.TypeOf((*MockUserRepo)(nil).UpdateAddress), userid, aid, Address)
}

// UpdateUserProfile mocks base method.
func (m *MockUserRepo) UpdateUserProfile(userid uint, user models.UserProfile) (models.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProfile", userid, user)
	ret0, _ := ret[0].(models.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserProfile indicates an expected call of UpdateUserProfile.
func (mr *MockUserRepoMockRecorder) UpdateUserProfile(userid, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfile", reflect.TypeOf((*MockUserRepo)(nil).UpdateUserProfile), userid, user)
}

// UpdateWallet mocks base method.
func (m *MockUserRepo) UpdateWallet(wallet float64, userID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWallet", wallet, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWallet indicates an expected call of UpdateWallet.
func (mr *MockUserRepoMockRecorder) UpdateWallet(wallet, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWallet", reflect.TypeOf((*MockUserRepo)(nil).UpdateWallet), wallet, userID)
}

// UserProfile mocks base method.
func (m *MockUserRepo) UserProfile(userid uint) (models.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserProfile", userid)
	ret0, _ := ret[0].(models.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserProfile indicates an expected call of UserProfile.
func (mr *MockUserRepoMockRecorder) UserProfile(userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserProfile", reflect.TypeOf((*MockUserRepo)(nil).UserProfile), userid)
}

// ViewAddress mocks base method.
func (m *MockUserRepo) ViewAddress(id uint) ([]models.AddressRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewAddress", id)
	ret0, _ := ret[0].([]models.AddressRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewAddress indicates an expected call of ViewAddress.
func (mr *MockUserRepoMockRecorder) ViewAddress(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewAddress", reflect.TypeOf((*MockUserRepo)(nil).ViewAddress), id)
}
